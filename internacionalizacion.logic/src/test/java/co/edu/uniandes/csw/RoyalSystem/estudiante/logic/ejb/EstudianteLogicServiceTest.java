/* ========================================================================
 * Copyright 2014 RoyalSystem
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 RoyalSystem

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201410152247

*/

package co.edu.uniandes.csw.RoyalSystem.estudiante.logic.ejb;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.RoyalSystem.estudiante.logic.dto.EstudiantePageDTO;
import co.edu.uniandes.csw.RoyalSystem.estudiante.logic.dto.EstudianteDTO;
import co.edu.uniandes.csw.RoyalSystem.estudiante.logic.api.IEstudianteLogicService;
import co.edu.uniandes.csw.RoyalSystem.estudiante.persistence.EstudiantePersistence;
import co.edu.uniandes.csw.RoyalSystem.estudiante.persistence.api.IEstudiantePersistence;
import co.edu.uniandes.csw.RoyalSystem.estudiante.persistence.entity.EstudianteEntity;
import co.edu.uniandes.csw.RoyalSystem.estudiante.persistence.converter.EstudianteConverter;
import static co.edu.uniandes.csw.RoyalSystem.util._TestUtil.*;

@RunWith(Arquillian.class)
public class EstudianteLogicServiceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(EstudianteLogicService.class.getPackage())
				.addPackage(IEstudianteLogicService.class.getPackage())
				.addPackage(EstudiantePersistence.class.getPackage())
				.addPackage(EstudianteEntity.class.getPackage())
				.addPackage(IEstudiantePersistence.class.getPackage())
                .addPackage(EstudianteDTO.class.getPackage())
                .addPackage(EstudianteConverter.class.getPackage())
                .addPackage(EstudianteEntity.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private IEstudianteLogicService estudianteLogicService;
	
	@Inject
	private IEstudiantePersistence estudiantePersistence;	

	@Before
	public void configTest() {
		try {
			clearData();
			insertData();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void clearData() {
		List<EstudianteDTO> dtos=estudiantePersistence.getEstudiantes();
		for(EstudianteDTO dto:dtos){
			estudiantePersistence.deleteEstudiante(dto.getId());
		}
	}

	private List<EstudianteDTO> data=new ArrayList<EstudianteDTO>();

	private void insertData() {
		for(int i=0;i<3;i++){
			EstudianteDTO pdto=new EstudianteDTO();
			pdto.setName(generateRandom(String.class));
			pdto.setCreditosAprovados(generateRandom(Integer.class));
			pdto.setCodigo(generateRandom(Integer.class));
			pdto.setPromedio(generateRandom(Integer.class));
			pdto.setTipoId(generateRandom(Long.class));
			pdto=estudiantePersistence.createEstudiante(pdto);
			data.add(pdto);
		}
	}
	
	@Test
	public void createEstudianteTest(){
		EstudianteDTO ldto=new EstudianteDTO();
		ldto.setName(generateRandom(String.class));
		ldto.setCreditosAprovados(generateRandom(Integer.class));
		ldto.setCodigo(generateRandom(Integer.class));
		ldto.setPromedio(generateRandom(Integer.class));
		ldto.setTipoId(generateRandom(Long.class));
		
		
		EstudianteDTO result=estudianteLogicService.createEstudiante(ldto);
		
		Assert.assertNotNull(result);
		
		EstudianteDTO pdto=estudiantePersistence.getEstudiante(result.getId());
		
		Assert.assertEquals(ldto.getName(), pdto.getName());	
		Assert.assertEquals(ldto.getCreditosAprovados(), pdto.getCreditosAprovados());	
		Assert.assertEquals(ldto.getCodigo(), pdto.getCodigo());	
		Assert.assertEquals(ldto.getPromedio(), pdto.getPromedio());	
		Assert.assertEquals(ldto.getTipoId(), pdto.getTipoId());	
	}
	
	@Test
	public void getEstudiantesTest(){
		List<EstudianteDTO> list=estudianteLogicService.getEstudiantes();
		Assert.assertEquals(list.size(), data.size());
        for(EstudianteDTO ldto:list){
        	boolean found=false;
            for(EstudianteDTO pdto:data){
            	if(ldto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getEstudianteTest(){
		EstudianteDTO pdto=data.get(0);
		EstudianteDTO ldto=estudianteLogicService.getEstudiante(pdto.getId());
        Assert.assertNotNull(ldto);
		Assert.assertEquals(pdto.getName(), ldto.getName());
		Assert.assertEquals(pdto.getCreditosAprovados(), ldto.getCreditosAprovados());
		Assert.assertEquals(pdto.getCodigo(), ldto.getCodigo());
		Assert.assertEquals(pdto.getPromedio(), ldto.getPromedio());
		Assert.assertEquals(pdto.getTipoId(), ldto.getTipoId());
        
	}
	
	@Test
	public void deleteEstudianteTest(){
		EstudianteDTO pdto=data.get(0);
		estudianteLogicService.deleteEstudiante(pdto.getId());
        EstudianteDTO deleted=estudiantePersistence.getEstudiante(pdto.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateEstudianteTest(){
		EstudianteDTO pdto=data.get(0);
		
		EstudianteDTO ldto=new EstudianteDTO();
		ldto.setId(pdto.getId());
		ldto.setName(generateRandom(String.class));
		ldto.setCreditosAprovados(generateRandom(Integer.class));
		ldto.setCodigo(generateRandom(Integer.class));
		ldto.setPromedio(generateRandom(Integer.class));
		ldto.setTipoId(generateRandom(Long.class));
		
		
		estudianteLogicService.updateEstudiante(ldto);
		
		
		EstudianteDTO resp=estudiantePersistence.getEstudiante(pdto.getId());
		
		Assert.assertEquals(ldto.getName(), resp.getName());	
		Assert.assertEquals(ldto.getCreditosAprovados(), resp.getCreditosAprovados());	
		Assert.assertEquals(ldto.getCodigo(), resp.getCodigo());	
		Assert.assertEquals(ldto.getPromedio(), resp.getPromedio());	
		Assert.assertEquals(ldto.getTipoId(), resp.getTipoId());	
	}
	
	@Test
	public void getEstudiantePaginationTest(){
		
		EstudiantePageDTO dto1=estudianteLogicService.getEstudiantes(1,2);
		Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
		
		
		EstudiantePageDTO dto2=estudianteLogicService.getEstudiantes(2,2);
		Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
		
		for(EstudianteDTO dto:dto1.getRecords()){
        	boolean found=false;
            for(EstudianteDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(EstudianteDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(EstudianteDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        EstudiantePageDTO dto3=estudianteLogicService.getEstudiantes(1,3);
		Assert.assertNotNull(dto3);
        Assert.assertEquals(dto3.getRecords().size(),data.size());
        Assert.assertEquals(dto3.getTotalRecords().longValue(),data.size());
		
		for(EstudianteDTO dto:dto3.getRecords()){
        	boolean found=false;
            for(EstudianteDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	
}